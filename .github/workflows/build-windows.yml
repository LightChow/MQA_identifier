name: Build MQA Identifier Windows EXE

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: "4.0.3"

      - name: "Setup vcpkg and install libflac"
        shell: pwsh
        env:
          VCPKG_ROOT: ${{ runner.temp }}\vcpkg
        run: |
          $vcpkgRoot = Join-Path $env:RUNNER_TEMP 'vcpkg'
          Write-Host "Cloning vcpkg to: $vcpkgRoot"
          git clone https://github.com/microsoft/vcpkg.git $vcpkgRoot
          Push-Location $vcpkgRoot
          Write-Host "Bootstrapping vcpkg (batch bootstrap)"
          & .\bootstrap-vcpkg.bat
          if ($LASTEXITCODE -ne 0) {
            Write-Host 'bootstrap-vcpkg.bat failed with exit code' $LASTEXITCODE
            exit $LASTEXITCODE
          }
          Write-Host "Installing libflac for triplet x64-windows (provides FLAC and FLAC++ CMake targets)"
          & .\vcpkg.exe install libflac --triplet x64-windows
          if ($LASTEXITCODE -ne 0) {
            Write-Host 'vcpkg install libflac failed with exit code' $LASTEXITCODE
            exit $LASTEXITCODE
          }
          Write-Host "vcpkg installed packages at: $vcpkgRoot\installed\x64-windows"
          Write-Host "Listing installed include files (please copy these lines if the build still fails):"
          Get-ChildItem -Path "$vcpkgRoot\installed\x64-windows\include" -Recurse -ErrorAction SilentlyContinue | ForEach-Object { Write-Host $_.FullName }
          Pop-Location

      - name: "Configure with CMake (vcpkg toolchain + forced include flags)"
        shell: pwsh
        env:
          VCPKG_ROOT: ${{ runner.temp }}\vcpkg
        run: |
          $vcpkgRoot = Join-Path $env:RUNNER_TEMP 'vcpkg'
          $toolchain = Join-Path $vcpkgRoot 'scripts\buildsystems\vcpkg.cmake'
          Write-Host "Using vcpkg toolchain: $toolchain"
          New-Item -ItemType Directory -Path build -Force | Out-Null
          Push-Location build
          $prefix = Join-Path $vcpkgRoot 'installed\x64-windows'
          $includePath = Join-Path $prefix 'include'
          $libPath = Join-Path $prefix 'lib'
          $flacShare = Join-Path $prefix 'share\flac'
          Write-Host 'CMAKE_PREFIX_PATH = ' $prefix
          Write-Host 'CMAKE_INCLUDE_PATH = ' $includePath
          Write-Host 'CMAKE_LIBRARY_PATH = ' $libPath
          Write-Host 'FLAC_DIR = ' $flacShare
          # Force the MSVC compiler to add the vcpkg include path so FLAC++ headers are visible.
          # Note: CMake will still use the vcpkg toolchain, but these flags guarantee the /I path for MSVC.
          $cxxFlags = "/I`"$includePath`""
          $cFlags  = "/I`"$includePath`""
          cmake .. -A x64 -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE="$toolchain" -DVCPKG_TARGET_TRIPLET="x64-windows" -DCMAKE_PREFIX_PATH="$prefix" -DCMAKE_INCLUDE_PATH="$includePath" -DCMAKE_LIBRARY_PATH="$libPath" -DFLAC_DIR="$flacShare" -DCMAKE_CXX_FLAGS="$cxxFlags" -DCMAKE_C_FLAGS="$cFlags"
          if ($LASTEXITCODE -ne 0) {
            Write-Host 'CMake configure failed. Printing CMake output logs if present.'
            if (Test-Path 'CMakeFiles\CMakeError.log') { Get-Content 'CMakeFiles\CMakeError.log' | ForEach-Object { Write-Host $_ } }
            if (Test-Path 'CMakeFiles\CMakeOutput.log') { Get-Content 'CMakeFiles\CMakeOutput.log' | ForEach-Object { Write-Host $_ } }
            exit $LASTEXITCODE
          }
          Write-Host 'CMake configure succeeded. Please copy any lines shown below that mention FLAC or FLAC++ from CMakeCache.txt:'
          if (Test-Path 'CMakeCache.txt') { Select-String -Path CMakeCache.txt -Pattern FLAC -SimpleMatch | ForEach-Object { Write-Host $_ } }
          Pop-Location

      - name: "Diagnostic - show build files and generated project info"
        shell: pwsh
        run: |
          if (Test-Path build) {
            Write-Host "Listing build folder files"
            Get-ChildItem -Path build -Recurse -File | ForEach-Object { Write-Host $_.FullName }
            $proj = Get-ChildItem -Path build -Filter '*.vcxproj' -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
            if ($proj) {
              Write-Host 'Project file found:' $proj.FullName
              Write-Host 'Searching for AdditionalIncludeDirectories in project file:'
              Select-String -Path $proj.FullName -Pattern 'AdditionalIncludeDirectories' -SimpleMatch | ForEach-Object { Write-Host $_.ToString() }
            } else {
              Write-Host 'No .vcxproj found yet.'
            }
          } else {
            Write-Host 'No build directory present.'
          }

      - name: "Build"
        shell: pwsh
        run: |
          Push-Location build
          cmake --build . --config Release -- /m
          Pop-Location

      - name: "Collect artifact"
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path artifact -Force | Out-Null
          if (Test-Path 'build\Release\mqa_identifier.exe') {
            Copy-Item 'build\Release\mqa_identifier.exe' 'artifact\mqa_identifier.exe'
          } elseif (Test-Path 'build\mqa_identifier.exe') {
            Copy-Item 'build\mqa_identifier.exe' 'artifact\mqa_identifier.exe'
          } else {
            Write-Host 'ERROR: executable not found; listing build directory for debugging'
            Get-ChildItem -Recurse build | ForEach-Object { Write-Host $_.FullName }
            exit 1
          }

      - name: "Upload artifact"
        uses: actions/upload-artifact@v4
        with:
          name: mqa-identifier-windows
          path: artifact\mqa_identifier.exe
