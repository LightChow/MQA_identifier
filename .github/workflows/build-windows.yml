name: Build MQA Identifier Windows EXE

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: "4.0.3"

      - name: Setup vcpkg and install libflac
        shell: pwsh
        run: |
          $vcpkgRoot = Join-Path $env:RUNNER_TEMP 'vcpkg'
          Write-Host "vcpkg root: $vcpkgRoot"
          git clone https://github.com/microsoft/vcpkg.git $vcpkgRoot
          Push-Location $vcpkgRoot
          & .\bootstrap-vcpkg.bat
          if ($LASTEXITCODE -ne 0) { Write-Host 'bootstrap failed' ; exit $LASTEXITCODE }
          & .\vcpkg.exe install libflac --triplet x64-windows
          if ($LASTEXITCODE -ne 0) { Write-Host 'vcpkg install failed' ; exit $LASTEXITCODE }
          Write-Host "vcpkg installed at: $vcpkgRoot\installed\x64-windows"
          Get-ChildItem -Path "$vcpkgRoot\installed\x64-windows\include" -Recurse -ErrorAction SilentlyContinue | ForEach-Object { Write-Host $_.FullName }
          Pop-Location

      - name: Configure with CMake (using vcpkg toolchain)
        shell: pwsh
        run: |
          $vcpkgRoot = Join-Path $env:RUNNER_TEMP 'vcpkg'
          $toolchain = Join-Path $vcpkgRoot 'scripts\buildsystems\vcpkg.cmake'
          New-Item -ItemType Directory -Path build -Force | Out-Null
          Push-Location build
          cmake .. -A x64 -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE="$toolchain" -DVCPKG_TARGET_TRIPLET="x64-windows"
          if ($LASTEXITCODE -ne 0) {
            Write-Host 'CMake configure failed'; if (Test-Path 'CMakeFiles\CMakeError.log') { Get-Content 'CMakeFiles\CMakeError.log' | ForEach-Object { Write-Host $_ } }; exit $LASTEXITCODE
          }
          if (Test-Path 'CMakeCache.txt') { Select-String -Path CMakeCache.txt -Pattern FLAC -SimpleMatch | ForEach-Object { Write-Host $_ } }
          Pop-Location

      - name: Patch generated project to add vcpkg include and FLAC++ lib
        shell: pwsh
        run: |
          $vcpkgRoot = Join-Path $env:RUNNER_TEMP 'vcpkg'
          $prefix = Join-Path $vcpkgRoot 'installed\x64-windows'
          $includePath = (Join-Path $prefix 'include') -replace '\\','\\'
          $libPath = (Join-Path $prefix 'lib') -replace '\\','\\'
          $flacLib = Join-Path $libPath 'FLAC++.lib'
          Write-Host "Patching project to add include: $includePath and lib: $flacLib"

          $projPath = Get-ChildItem -Path build -Filter 'MQA_identifier.vcxproj' -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
          if (-not $projPath) { Write-Host "Could not find MQA_identifier.vcxproj in build; aborting patch"; exit 1 }
          $proj = Get-Content $projPath.FullName

          # Add include to AdditionalIncludeDirectories inside each ItemDefinitionGroup/ClCompile
          $projText = $proj -join "`n"
          # If AdditionalIncludeDirectories exists, append; else add new element under first ClCompile
          if ($projText -match '<AdditionalIncludeDirectories>(.*?)</AdditionalIncludeDirectories>') {
            $projText = [regex]::Replace($projText, '<AdditionalIncludeDirectories>(.*?)</AdditionalIncludeDirectories>', "<AdditionalIncludeDirectories>`$1;$includePath</AdditionalIncludeDirectories>")
          } else {
            $projText = [regex]::Replace($projText, '(<ClCompile.*?>)', "`$1`n      <AdditionalIncludeDirectories>$includePath;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>")
          }

          # Ensure FLAC++.lib is in AdditionalDependencies for the Link element
          if ($projText -match '<AdditionalDependencies>(.*?)</AdditionalDependencies>') {
            $projText = [regex]::Replace($projText, '<AdditionalDependencies>(.*?)</AdditionalDependencies>', "<AdditionalDependencies>`$1;$(ProjectDir)..\\..\\_temp\\vcpkg\\installed\\x64-windows\\lib\\FLAC++.lib</AdditionalDependencies>")
          } else {
            $projText = [regex]::Replace($projText, '(<Link.*?>)', "`$1`n      <AdditionalDependencies>$(ProjectDir)..\\..\\_temp\\vcpkg\\installed\\x64-windows\\lib\\FLAC++.lib;%(AdditionalDependencies)</AdditionalDependencies>")
          }

          # Write patched project back
          $projText | Out-File -FilePath $projPath.FullName -Encoding utf8
          Write-Host "Patched project: $($projPath.FullName)"

      - name: Build
        shell: pwsh
        run: |
          # Ensure environment variables so MSVC sees vcpkg include/lib
          $vcpkgRoot = Join-Path $env:RUNNER_TEMP 'vcpkg'
          $prefix = Join-Path $vcpkgRoot 'installed\x64-windows'
          $env:INCLUDE = (Join-Path $prefix 'include') + ';' + $env:INCLUDE
          $env:LIB = (Join-Path $prefix 'lib') + ';' + $env:LIB
          Push-Location build
          cmake --build . --config Release -- /m
          Pop-Location

      - name: Collect artifact
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path artifact -Force | Out-Null
          if (Test-Path 'build\Release\mqa_identifier.exe') {
            Copy-Item 'build\Release\mqa_identifier.exe' 'artifact\mqa_identifier.exe'
          } elseif (Test-Path 'build\mqa_identifier.exe') {
            Copy-Item 'build\mqa_identifier.exe' 'artifact\mqa_identifier.exe'
          } else {
            Write-Host 'ERROR: executable not found; listing build directory for debugging'
            Get-ChildItem -Recurse build | ForEach-Object { Write-Host $_.FullName }
            exit 1
          }

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mqa-identifier-windows
          path: artifact\mqa_identifier.exe
