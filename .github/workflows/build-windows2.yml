name: Build MQA_identifier Windows CLI Release

on:
  workflow_dispatch:

jobs:
  build-windows-cli:
    runs-on: windows-2025
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg.git vcpkg
          .\vcpkg\bootstrap-vcpkg.bat
        shell: cmd

      - name: Install FLAC (vcpkg)
        run: |
          .\vcpkg\vcpkg.exe install libflac:x64-windows
        shell: cmd

      - name: Install FLAC (vcpkg)
        run: |
          .\vcpkg\vcpkg.exe install libflac:x64-windows
        shell: cmd

      - name: Show installed FLAC files (debug)
        run: |
          echo Installed files in vcpkg\installed\x64-windows\include
          dir /b /s vcpkg\installed\x64-windows\include\FLAC*
          echo Installed lib files in vcpkg\installed\x64-windows\lib
          dir /b /s vcpkg\installed\x64-windows\lib\*
        shell: cmd

      - name: Configure Release build (force include and link)
        run: |
          set VCPKG_DIR=%CD%\vcpkg
          set VCPKG_INST=%VCPKG_DIR%\installed\x64-windows
          cmake -S . -B build -A x64 -DCMAKE_BUILD_TYPE=Release ^
            -DCMAKE_TOOLCHAIN_FILE=%VCPKG_DIR%\scripts\buildsystems\vcpkg.cmake ^
            -DFLAC_INCLUDE_DIR="%VCPKG_INST%\include" ^
            -DFLACPP_INCLUDE_DIR="%VCPKG_INST%\include" ^
            -DFLACPP_INCLUDE_DIRS="%VCPKG_INST%\include" ^
            -DFLACPP_LIBRARY="%VCPKG_INST%\lib\FLAC++.lib" ^
            -DFLAC++_LIBRARIES="%VCPKG_INST%\lib\FLAC++.lib" ^
            -DFLAC_LIBRARY="%VCPKG_INST%\lib\FLAC.lib" ^
            -DCMAKE_EXE_LINKER_FLAGS="/LIBPATH:%VCPKG_INST%\lib" ^
            -DCMAKE_SHARED_LINKER_FLAGS="/LIBPATH:%VCPKG_INST%\lib" ^
            -DCMAKE_CXX_FLAGS="/I%VCPKG_INST%\include" ^
            -DCMAKE_CXX_FLAGS_RELEASE="/I%VCPKG_INST%\include" ^
            -DENABLE_QT=OFF -DQT_FOUND=OFF -DGUI=OFF
        shell: cmd

      - name: Dump CMake cache for FLAC
        run: |
          cmake -S . -B build -LA | findstr /I "FLAC"
        shell: cmd

      - name: Verify vcpkg lib files
        run: dir /b vcpkg\installed\x64-windows\lib
        shell: cmd

      - name: Build Release
        run: cmake --build build --config Release -- /m
        shell: cmd

      - name: Find any FLAC DLLs (debug)
        run: |
          echo "search vcpkg installed bin"
          dir /b /s vcpkg\installed\x64-windows\bin\*FLAC*.dll || echo none
          echo "search vcpkg installed lib"
          dir /b /s vcpkg\installed\x64-windows\lib\*FLAC*.dll || echo none
          echo "search repo tree"
          dir /b /s *FLAC*.dll || echo none
        shell: cmd

      - name: Prepare artifact folder (include vcpkg DLLs)
        run: |
          mkdir output

          rem copy EXE from common locations (adjust names if different)
          if exist build\Release\MQA_identifier.exe copy build\Release\MQA_identifier.exe output\ || echo no-exe-in-build-Release
          if exist build\MQA_identifier.exe copy build\MQA_identifier.exe output\ || echo no-exe-in-build_root
          if exist MQA_identifier.exe copy MQA_identifier.exe output\ || echo no-exe-in-repo-root

          rem copy DLLs next to the EXE if present in build\Release
          for %%f in (build\Release\*.dll) do copy %%f output\  || echo no-dlls-in-build-release

          rem copy vcpkg runtime DLLs (FLAC++, FLAC, ogg etc.) from vcpkg installed bin
          if exist vcpkg\installed\x64-windows\bin (
            for %%f in (vcpkg\installed\x64-windows\bin\*.dll) do copy %%f output\  || echo no-dlls-in-vcpkg-bin
          ) else (
            echo "vcpkg installed bin not found"
          )

          rem also copy libs if any needed for inspection
          if exist vcpkg\installed\x64-windows\lib (
            copy vcpkg\installed\x64-windows\lib\FLAC++.lib output\ 2>nul || echo no-flacpp-lib
            copy vcpkg\installed\x64-windows\lib\FLAC.lib output\ 2>nul || echo no-flac-lib
          )
        shell: cmd

      - name: Upload artifact (full output)
        uses: actions/upload-artifact@v4
        with:
          name: MQA_identifier-windows-cli-full
          path: output
